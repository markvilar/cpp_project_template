---
# Programming language.
Language: Cpp

# The extra indent or outdent of access modifiers, e.g. public:.
AccessModifierOffset: -4

# If true, horizontally aligns arguments after an open bracket.
AlignAfterOpenBracket: DontAlign

# Style of aligning consecutive macro definitions.
AlignConsecutiveMacros: false

# Style of aligning consecutive assignments.
AlignConsecutiveAssignments: false

# Style of aligning consecutive declarations.
AlignConsecutiveDeclarations: false

# Options for aligning backslashes in escaped newlines.
AlignEscapedNewlines: Right

# If true, horizontally align operands of binary and ternary expressions.
AlignOperands: false

# If true, aligns trailing comments.
AlignTrailingComments: true

# If a function call or braced initializer list doesn’t fit on a line, allow 
# putting all arguments onto the next line, even if BinPackArguments is false.
AllowAllArgumentsOnNextLine: false

# If the function declaration doesn’t fit on a line, allow putting all 
# parameters of a function declaration onto the next line even if 
# BinPackParameters is false.
AllowAllParametersOfDeclarationOnNextLine: false

# Dependent on the value, while (true) { continue; } can be put on a single 
# line.
AllowShortBlocksOnASingleLine: Never

# If true, short case labels will be contracted to a single line.
AllowShortCaseLabelsOnASingleLine: false

# Dependent on the value, int f() { return 0; } can be put on a single line.
AllowShortFunctionsOnASingleLine: All

# Dependent on the value, auto lambda []() { return 0; } can be put on a single 
# line.
AllowShortLambdasOnASingleLine: All

# Dependent on the value, if (a) return; can be put on a single line.
AllowShortIfStatementsOnASingleLine: Never

# If true, while (true) continue; can be put on a single line.
AllowShortLoopsOnASingleLine: false

# The function definition return type breaking style to use. This option is 
# deprecated and is retained for backwards compatibility.
AlwaysBreakAfterDefinitionReturnType: None

# The function declaration return type breaking style to use.
AlwaysBreakAfterReturnType: None

# If true, always break before multiline string literals.
AlwaysBreakBeforeMultilineStrings: false

# The template declaration breaking style to use.
AlwaysBreakTemplateDeclarations: Yes

# If false, a function call’s arguments will either be all on the same line or 
# will have one line each.
BinPackArguments: false

# Control of individual brace wrapping cases.
BraceWrapping:
  AfterCaseLabel: true
  AfterClass: true
  AfterControlStatement: true
  AfterEnum: true
  AfterFunction: true
  AfterNamespace: true
  AfterObjCDeclaration: true
  AfterStruct: true
  AfterUnion: true
  AfterExternBlock: true
  BeforeCatch: true
  BeforeElse: true
  BeforeLambdaBody: true
  BeforeWhile: true
  IndentBraces: false
  SplitEmptyFunction: true
  SplitEmptyRecord: true
  SplitEmptyNamespace: true

# The way to wrap binary operators.
BreakBeforeBinaryOperators: NonAssignment

# The brace breaking style to use.
BreakBeforeBraces: Allman

# The inheritance list style to use.
BreakInheritanceList: BeforeColon

# If true, ternary operators will be placed after line breaks.
BreakBeforeTernaryOperators: true

# The break constructor initializers style to use.
BreakConstructorInitializers: BeforeColon

# Allow breaking string literals when formatting.
BreakStringLiterals: true

# The column limit.
ColumnLimit: 80

# A regular expression that describes comments with special meaning, which 
# should not be split into lines or otherwise changed.
CommentPragmas: '^ IWYU pragma:'

# If true, consecutive namespace declarations will be on the same line. If 
# false, each namespace is declared on a new line.
CompactNamespaces: false

# The number of characters to use for indentation of constructor initializer 
# lists as well as inheritance lists.
ConstructorInitializerIndentWidth: 4

# Indent width for line continuations.
ContinuationIndentWidth: 4

# If true, format braced lists as best suited for C++11 braced lists.
Cpp11BracedListStyle: true

# Analyze the formatted file for the most used line ending (\r\n or \n). 
# UseCRLF is only used as a fallback if none can be derived.
DeriveLineEnding: true

# If true, analyze the formatted file for the most common alignment of & and *. 
# Pointer and reference alignment styles are going to be updated according to 
# the preferences found in the file. PointerAlignment is then used only as 
# fallback.
DerivePointerAlignment: false

# Disables formatting completely.
DisableFormat: false

# If true, clang-format detects whether function calls and definitions are 
# formatted with one parameter per line.
ExperimentalAutoDetectBinPacking: false

# If true, clang-format adds missing namespace end comments for short namespaces
# and fixes invalid existing ones. Short ones are controlled by 
# “ShortNamespaceLines”.
FixNamespaceComments: true

# A vector of macros that should be interpreted as foreach loops instead of as 
# function calls.
ForEachMacros:
  - foreach
  - Q_FOREACH
  - BOOST_FOREACH

# Dependent on the value, multiple #include blocks can be sorted as one and 
# divided based on category.
IncludeBlocks: Preserve

# Regular expressions denoting the different #include categories used for 
# ordering #includes.
IncludeCategories:
  - Regex:           '^"(llvm|llvm-c|clang|clang-c)/'
    Priority:        2
    SortPriority:    0
  - Regex:           '^(<|"(gtest|gmock|isl|json)/)'
    Priority:        3
    SortPriority:    0
  - Regex:           '.*'
    Priority:        1
    SortPriority:    0

# Specify a regular expression of suffixes that are allowed in the 
# file-to-main-include mapping.
IncludeIsMainRegex: '(Test)?$'

# Specify a regular expression for files being formatted that are allowed to be 
# considered “main” in the file-to-main-include mapping.
IncludeIsMainSourceRegex: ''

# Indent case labels one level from the switch statement.
IndentCaseLabels: false

# Indent goto labels.
IndentGotoLabels: true

# The preprocessor directive indenting style to use.
IndentPPDirectives: None

# The number of columns to use for indentation.
IndentWidth: 4

# Indent if a function definition or declaration is wrapped after the type.
IndentWrappedFunctionNames: false

# If true, the empty line at the start of blocks is kept.
KeepEmptyLinesAtTheStartOfBlocks: true

# A regular expression matching macros that start a block.
MacroBlockBegin: ''

# A regular expression matching macros that end a block.
MacroBlockEnd: ''

# The maximum number of consecutive empty lines to keep.
MaxEmptyLinesToKeep: 1

# The indentation used for namespaces.
NamespaceIndentation: None

# Controls bin-packing Objective-C protocol conformance list items into as few 
# lines as possible when they go over ColumnLimit.
ObjCBinPackProtocolList: Auto

# The number of characters to use for indentation of ObjC blocks.
ObjCBlockIndentWidth: 4

# Add a space after @property in Objective-C, i.e. use @property (readonly) 
# instead of @property(readonly).
ObjCSpaceAfterProperty: false

# Add a space in front of an Objective-C protocol list, i.e. use Foo <Protocol> 
# instead of Foo<Protocol>.
ObjCSpaceBeforeProtocolList: true

# The penalty for breaking around an assignment operator.
PenaltyBreakAssignment: 2

# The penalty for breaking a function call after call(.
PenaltyBreakBeforeFirstCallParameter: 1000

# The penalty for each line break introduced inside a comment.
PenaltyBreakComment: 300

# The penalty for breaking before the first <<.
PenaltyBreakFirstLessLess: 120

# The penalty for each line break introduced inside a string literal.
PenaltyBreakString: 1000

# The penalty for breaking after template declaration.
PenaltyBreakTemplateDeclaration: 10

# The penalty for each character outside of the column limit.
PenaltyExcessCharacter: 1000000

# Penalty for putting the return type of a function onto its own line.
PenaltyReturnTypeOnItsOwnLine: 60

# Pointer and reference alignment style.
PointerAlignment: Left

# If true, clang-format will attempt to re-flow comments.
ReflowComments: true

# Controls if and how clang-format will sort #includes. If Never, includes are 
# never sorted. If CaseInsensitive, includes are sorted in an ASCIIbetical or 
# case insensitive fashion. If CaseSensitive, includes are sorted in an 
# alphabetical or case sensitive fashion.
SortIncludes: true

# If true, clang-format will sort using declarations.
SortUsingDeclarations: true

# If true, a space is inserted after C style casts.
SpaceAfterCStyleCast: false

# If true, a space is inserted after the logical not operator (!).
SpaceAfterLogicalNot: false

# If true, a space will be inserted after the ‘template’ keyword.
SpaceAfterTemplateKeyword: true

# If false, spaces will be removed before assignment operators.
SpaceBeforeAssignmentOperators: true

# If true, a space will be inserted before a C++11 braced list used to 
# initialize an object (after the preceding identifier or type).
SpaceBeforeCpp11BracedList: false

# If false, spaces will be removed before constructor initializer colon.
SpaceBeforeCtorInitializerColon: true

# If false, spaces will be removed before inheritance colon.
SpaceBeforeInheritanceColon: true

# Defines in which cases to put a space before opening parentheses.
SpaceBeforeParens: ControlStatements

# If false, spaces will be removed before range-based for loop colon.
SpaceBeforeRangeBasedForLoopColon: true

# If true, spaces will be inserted into {}.
SpaceInEmptyBlock: false

# If true, spaces may be inserted into ().
SpaceInEmptyParentheses: false

# The number of spaces before trailing line comments (// - comments).
SpacesBeforeTrailingComments: 1

# The SpacesInAnglesStyle to use for template argument lists.
SpacesInAngles: false

# If true, spaces will be inserted around if/for/switch/while conditions.
SpacesInConditionalStatement: false

# If true, spaces are inserted inside container literals 
# (e.g. ObjC and Javascript array and dict literals).
SpacesInContainerLiterals: true

# If true, spaces may be inserted into C style casts.
SpacesInCStyleCastParentheses: false

# If true, spaces will be inserted after ( and before ).
SpacesInParentheses: false

# If true, spaces will be inserted after [ and before ]. Lambdas without 
# arguments or unspecified size array declarations will not be affected.
SpacesInSquareBrackets: false

# If true, spaces will be before [. Lambdas will not be affected. Only the 
# first [ will get a space added.
SpaceBeforeSquareBrackets: false

# Parse and format C++ constructs compatible with this standard.
Standard: Latest

# A vector of macros that should be interpreted as complete statements.
StatementMacros:
  - Q_UNUSED
  - QT_REQUIRE_VERSION

# The number of columns used for tab stops.
TabWidth: 4

# Use \r\n instead of \n for line breaks. Also used as fallback if 
# DeriveLineEnding is true.
UseCRLF: false

# The way to use tab characters in the resulting file.
UseTab: Never
...
